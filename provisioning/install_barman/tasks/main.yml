---
- name: Installing base tools
  apt:
    name:
      - python3-pexpect
      - python3-psycopg2
      - bash-completion
      - wget
    state: present
    update_cache: true

- name: Installing barman and postgresql packages on barman
  apt:
    name:
      - barman
      - barman-cli
      - postgresql-client
      - acl
    state: present
    update_cache: true
  when: (ansible_hostname == 'barman')

- name: Installing barman-cli package on nodes
  apt:
    name:
      - barman-cli
    state: present
    update_cache: true
  when: (ansible_hostname != 'barman')

- name: Generating SSH key for postgres
  user:
    name: postgres
    generate_ssh_key: yes
    ssh_key_type: rsa
    ssh_key_bits: 4096
    force: no
  when: (ansible_hostname == "node1")

- name: Generating SSH key for barman
  user:
    name: barman
    shell: /bin/bash
    generate_ssh_key: yes
    ssh_key_type: rsa
    ssh_key_bits: 4096
    force: no
  when: (ansible_hostname == "barman")

- name: Fetching all public ssh keys node1
  shell: cat /var/lib/postgresql/.ssh/id_rsa.pub
  register: ssh_keys
  when: (ansible_hostname == "node1")

- name: Transfering public key to node1
  delegate_to: barman
  authorized_key:
    key: "{{ ssh_keys.stdout }}"
    comment: "{{ ansible_hostname }}"
    user: barman
  when: (ansible_hostname == "node1")

- name: Fetching all public ssh keys barman
  shell: cat /var/lib/barman/.ssh/id_rsa.pub
  register: ssh_keys
  when: (ansible_hostname == "barman")

- name: Transfering public key to barman
  delegate_to: node1
  authorized_key:
    key: "{{ ssh_keys.stdout }}"
    comment: "{{ ansible_hostname }}"
    user: postgres
  when: (ansible_hostname == "barman")

- name: Creating barman user on node1
  become_user: postgres
  postgresql_user:
    name: barman
    password: "{{ barman_user_password }}"
    role_attr_flags: SUPERUSER
  ignore_errors: true
  when: (ansible_hostname == "node1")

- name: Adding permission for barman 
  lineinfile:
    path: /etc/postgresql/14/main/pg_hba.conf
    line: "{{ item.line }}"
  loop:
    - { line: 'host    all             {{ barman_user }}          {{ barman_ip }}/32        scram-sha-256'}
    - { line: 'host    replication     {{ barman_user }}          {{ barman_ip }}/32        scram-sha-256'}

  when: (ansible_hostname != "barman")

- name: Restarting -postgresql- service on node1
  service:
    name: postgresql
    state: restarted
  when: (ansible_hostname == "node1")

- name: Creating DB for backup
  become_user: postgres
  postgresql_db:
    name: otus
    encoding: UTF-8
    template: template0
    state: present
  when: (ansible_hostname == "node1")

- name: Copying .pgpass file in barman
  template:
     src: .pgpass.j2
     dest: /var/lib/barman/.pgpass
     owner: barman
     group: barman
     mode: 0600
  when: (ansible_hostname == "barman")

- name: Copying barman.conf on barman
  template:
    src: barman.conf.j2
    dest: /etc/barman.conf
    owner: barman
    group: barman
    mode: 0644
  when: (ansible_hostname == "barman")

- name: Copying node1.conf on barman
  template:
    src: node1.conf.j2
    dest: /etc/barman.d/node1.conf
    owner: barman
    group: barman
    mode: 0644
  when: (ansible_hostname == "barman")

- name: Barman switch-wall node1
  become_user: barman
  shell: barman switch-wal --force --archive-timeout 60 node1
  ignore_errors: true
  when: (ansible_hostname == "barman")

- name: Barman cron
  become_user: barman
  shell: barman cron
  when: (ansible_hostname == "barman")
...
